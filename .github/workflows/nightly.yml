# Nightly dependency scanning and maintenance
# Uses Renovate CLI to scan for outdated dependencies and security vulnerabilities
# Automatically creates PRs for dependency updates when needed
name: Nightly Dependency Scan

on:
  schedule:
    # Run every night at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:  # Allow manual triggering

env:
  # Renovate configuration
  LOG_LEVEL: info
  RENOVATE_CONFIG_FILE: .github/renovate.json5

jobs:
  # Scan for dependency updates using Renovate CLI
  dependency-scan:
    name: Dependency Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        # Renovate needs full history for better analysis
        fetch-depth: 0
        # Use a personal access token to allow Renovate to create PRs
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Node.js for Renovate CLI
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install Renovate CLI
      run: npm install -g renovate

    - name: Set up JDK 17 for Maven analysis
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: 17

    - name: Create Renovate configuration
      run: |
        cat > renovate.json5 << 'EOF'
        {
          // Renovate configuration for SonarQube ColdFusion Plugin
          "$schema": "https://docs.renovatebot.com/renovate-schema.json",
          
          // Basic configuration
          "platform": "github",
          "repositories": ["${{ github.repository }}"],
          "gitAuthor": "Renovate Bot <bot@renovateapp.com>",
          
          // Enable Maven support for Java dependencies
          "enabledManagers": ["maven"],
          
          // Package file patterns
          "maven": {
            "fileMatch": ["(^|/)pom\\.xml$"],
            "enabled": true
          },
          
          // Dependency update strategy
          "dependencyDashboard": true,
          "dependencyDashboardTitle": "üîß Dependency Updates Dashboard",
          
          // Group related updates
          "packageRules": [
            {
              "groupName": "SonarQube Platform",
              "matchPackageNames": [
                "org.sonarsource.sonarqube:sonar-plugin-api",
                "org.sonarsource.api.plugin:sonar-plugin-api-impl"
              ]
            },
            {
              "groupName": "Test Dependencies", 
              "matchDepTypes": ["test"],
              "matchPackageNames": [
                "junit:junit",
                "org.junit.jupiter:**",
                "org.mockito:**",
                "org.assertj:**"
              ]
            },
            {
              "groupName": "CFLint Dependencies",
              "matchPackageNames": [
                "com.github.cfmleditor:**"
              ]
            }
          ],
          
          // Security updates - merge automatically if tests pass
          "vulnerabilityAlerts": {
            "enabled": true,
            "automerge": true,
            "automergeType": "pr"
          },
          
          // PR settings
          "prConcurrentLimit": 3,
          "prHourlyLimit": 2,
          "prCreation": "immediate",
          
          // Only create PRs during business hours (reduce noise)
          "schedule": ["before 6am", "after 8pm", "every weekend"],
          
          // Commit and PR templates
          "commitMessageTopic": "{{depName}}",
          "commitMessageAction": "Update",
          "commitMessageExtra": "to {{newVersion}}",
          "prTitle": "‚¨ÜÔ∏è Update {{depName}} to {{newVersion}}",
          "prBodyTemplate": [
            "This PR updates `{{depName}}` from `{{currentVersion}}` to `{{newVersion}}`.",
            "",
            "### Release Notes",
            "{{#if hasReleaseNotes}}",
            "{{{releaseNotes}}}",
            "{{else}}",
            "See [changelog]({{sourceUrl}}) for details.",
            "{{/if}}",
            "",
            "### Compatibility",
            "- ‚úÖ Automated tests will verify compatibility",
            "- üîç Please review for any breaking changes",
            "",
            "---",
            "*This PR was automatically generated by Renovate Bot*"
          ],
          
          // Ignore certain dependencies that need manual review
          "ignoreDeps": [
            // Pin to specific SonarQube API version for compatibility
            // "org.sonarsource.sonarqube:sonar-plugin-api"
          ],
          
          // Semantic versioning handling
          "separateMajorMinor": true,
          "separateMultipleMajor": true,
          
          // Labels for categorization
          "labels": ["dependencies", "renovate"],
          "addLabels": ["maintenance"],
          
          // Enable various update types
          "minor": {
            "enabled": true
          },
          "patch": {
            "enabled": true
          },
          "major": {
            "enabled": true,
            "stabilityDays": 7  // Wait a week before updating major versions
          }
        }
        EOF

    - name: Run Renovate dependency scan
      run: |
        echo "üîç Starting Renovate dependency scan..."
        echo "Repository: ${{ github.repository }}"
        echo "Configuration: $(pwd)/renovate.json5"
        
        # Run Renovate with detailed logging
        renovate \
          --config-file=renovate.json5 \
          --token="${{ secrets.GITHUB_TOKEN }}" \
          --git-author="Renovate Bot <bot@renovateapp.com>" \
          --log-level=info \
          --log-file=renovate.log \
          --print-config \
          ${{ github.repository }}

    - name: Upload Renovate logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: renovate-logs
        path: |
          renovate.log
          renovate.json5
        if-no-files-found: warn

  # Security vulnerability scanning
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: 17

    - name: Authenticate to GitHub Packages
      run: |
        echo "<settings><servers><server><id>github</id><username>${{ github.actor }}</username><password>${{ secrets.GITHUB_TOKEN }}</password></server></servers></settings>" > ~/.m2/settings.xml

    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run OWASP Dependency Check
      run: |
        echo "üîí Running OWASP Dependency Check for security vulnerabilities..."
        
        # Add OWASP dependency check to Maven if not already present
        mvn org.owasp:dependency-check-maven:check \
          -DfailBuildOnCVSS=7 \
          -DsuppressionsFile=false \
          -DretireJsAnalyzerEnabled=false \
          -DnodeAnalyzerEnabled=false \
          -DnpmAuditAnalyzerEnabled=false \
          -DpyDistributionAnalyzerEnabled=false \
          -DpyPackageAnalyzerEnabled=false \
          -DrubygemsAnalyzerEnabled=false \
          -DbundleAuditAnalyzerEnabled=false \
          -DcocoapodsAnalyzerEnabled=false \
          -DswiftPackageManagerAnalyzerEnabled=false \
          -DnuspecAnalyzerEnabled=false \
          -DnugetconfAnalyzerAnalyzerEnabled=false \
          -DcmakeAnalyzerEnabled=false \
          -DautoconfAnalyzerEnabled=false \
          -DcomposerAnalyzerEnabled=false \
          -DcpanAnalyzerEnabled=false \
          -Dformat=ALL \
          -DprettyPrint=true || echo "‚ö†Ô∏è Security scan completed with warnings"

    - name: Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-report
        path: |
          target/dependency-check-report.*
        if-no-files-found: warn

  # License compliance scanning
  license-scan:
    name: License Compliance Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: 17

    - name: Authenticate to GitHub Packages
      run: |
        echo "<settings><servers><server><id>github</id><username>${{ github.actor }}</username><password>${{ secrets.GITHUB_TOKEN }}</password></server></servers></settings>" > ~/.m2/settings.xml

    - name: Scan for license compliance
      run: |
        echo "üìú Scanning for license compliance..."
        
        # Use Maven license plugin to generate license report
        mvn license:add-third-party \
          -Dlicense.useMissingFile=true \
          -Dlicense.failOnMissing=false \
          -Dlicense.sortArtifactByName=true \
          -Dlicense.includeTransitiveDependencies=true \
          -DthirdPartyFilename=THIRD-PARTY-LICENSES.txt || echo "License scan completed with warnings"
        
        # Check for potentially problematic licenses
        echo ""
        echo "üîç Checking for potentially problematic licenses..."
        
        # Create a list of licenses to review
        if [ -f target/generated-sources/license/THIRD-PARTY.txt ]; then
          echo "Third-party licenses found:"
          cat target/generated-sources/license/THIRD-PARTY.txt
          
          # Check for GPL or other copyleft licenses that might be problematic
          if grep -i "GPL\|LGPL\|AGPL\|Copyleft" target/generated-sources/license/THIRD-PARTY.txt; then
            echo "‚ö†Ô∏è Found potentially restrictive licenses - please review"
          else
            echo "‚úÖ No obviously problematic licenses found"
          fi
        else
          echo "No third-party license file generated"
        fi

    - name: Upload license report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: license-compliance-report
        path: |
          target/generated-sources/license/
        if-no-files-found: warn

  # Notification of nightly scan results
  notify:
    name: Notify Scan Results
    runs-on: ubuntu-latest
    needs: [dependency-scan, security-scan, license-scan]
    if: always()
    
    steps:
    - name: Generate maintenance summary
      run: |
        echo "üåô Nightly maintenance scan completed"
        echo "=================================="
        echo "Dependency scan: ${{ needs.dependency-scan.result }}"
        echo "Security scan: ${{ needs.security-scan.result }}"
        echo "License scan: ${{ needs.license-scan.result }}"
        echo ""
        
        # Generate summary for potential GitHub Issue or external notification
        cat > maintenance-summary.md << EOF
        # Nightly Maintenance Summary
        
        **Date:** $(date)
        **Repository:** ${{ github.repository }}
        
        ## Scan Results
        - üîÑ **Dependency Scan:** ${{ needs.dependency-scan.result }}
        - üîí **Security Scan:** ${{ needs.security-scan.result }}  
        - üìú **License Scan:** ${{ needs.license-scan.result }}
        
        ## Actions Taken
        - Renovate scanned for outdated dependencies
        - OWASP dependency check ran for security vulnerabilities
        - License compliance verification completed
        
        ## Next Steps
        - Review any PRs created by Renovate Bot
        - Address any security vulnerabilities found
        - Verify license compliance for new dependencies
        
        *Generated by GitHub Actions Nightly Maintenance*
        EOF
        
        echo "Summary generated:"
        cat maintenance-summary.md

    - name: Upload maintenance summary
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: nightly-maintenance-summary
        path: maintenance-summary.md
