# Pull Request validation workflow
name: Pull Request Validation

on:
  pull_request:
    branches: [ main, master, develop ]
    types: [opened, synchronize, reopened, ready_for_review]

env:
  MAVEN_OPTS: -Xmx2g -XX:ReservedCodeCacheSize=1g

jobs:
  # Validate PR metadata and requirements
  pr-validation:
    name: PR Metadata Validation
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate PR title and description
      uses: actions/github-script@v7
      with:
        script: |
          const pr = context.payload.pull_request;
          const errors = [];
          
          // Check PR title format
          const titlePattern = /^(feat|fix|docs|style|refactor|perf|test|chore|ci)(\(.+\))?: .+/;
          if (!titlePattern.test(pr.title)) {
            errors.push('PR title should follow conventional commits format: type(scope): description');
          }
          
          // Check PR description
          if (!pr.body || pr.body.trim().length < 50) {
            errors.push('PR description should be at least 50 characters long');
          }
          
          // Check for required sections in description
          const requiredSections = ['## Changes', '## Testing'];
          const missingsections = requiredSections.filter(section => 
            !pr.body || !pr.body.includes(section)
          );
          
          if (missingsections.length > 0) {
            errors.push(`PR description missing required sections: ${missingSections.join(', ')}`);
          }
          
          if (errors.length > 0) {
            const comment = `
            ## ❌ PR Validation Failed
            
            The following issues were found with this pull request:
            
            ${errors.map(error => `- ${error}`).join('\n')}
            
            ### Required PR Title Format
            \`type(scope): description\`
            
            Where type is one of: feat, fix, docs, style, refactor, perf, test, chore, ci
            
            ### Required PR Description Sections
            - ## Changes - Describe what changes were made
            - ## Testing - Describe how the changes were tested
            
            Please update your PR to address these issues.
            `;
            
            await github.rest.issues.createComment({
              issue_number: pr.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
            
            core.setFailed('PR validation failed');
          }

  # Quick build and test
  quick-validation:
    name: Quick Build & Test
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: 17

    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Compile and validate
      run: |
        mvn clean compile -B -q
        echo "✅ Compilation successful"

    - name: Run tests
      run: |
        mvn test -B -q
        echo "✅ Tests passed"

    - name: Package plugin
      run: |
        mvn package -DskipTests -B -q
        echo "✅ Plugin packaging successful"

  # Code quality check
  code-quality-check:
    name: Code Quality Check
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: 17

    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Cache SonarCloud packages
      uses: actions/cache@v4
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Run SonarCloud analysis
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        if [ -n "$SONAR_TOKEN" ]; then
          mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.projectKey=mwinfie_sonar-coldfusion \
            -Dsonar.organization=mwinfie \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.pullrequest.key=${{ github.event.pull_request.number }} \
            -Dsonar.pullrequest.branch=${{ github.event.pull_request.head.ref }} \
            -Dsonar.pullrequest.base=${{ github.event.pull_request.base.ref }}
        else
          echo "SONAR_TOKEN not available, skipping SonarCloud analysis"
          mvn -B verify
        fi

  # Check for breaking changes
  breaking-changes-check:
    name: Breaking Changes Check
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: Checkout base branch
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.base.ref }}
        path: base

    - name: Checkout PR branch
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.ref }}
        path: pr

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: 17

    - name: Check for breaking changes
      run: |
        echo "Checking for potential breaking changes..."
        
        # Check if plugin API version changed
        BASE_API_VERSION=$(grep -o '<sonar.plugin.api.version>.*</sonar.plugin.api.version>' base/pom.xml | sed 's/<[^>]*>//g' || echo "")
        PR_API_VERSION=$(grep -o '<sonar.plugin.api.version>.*</sonar.plugin.api.version>' pr/pom.xml | sed 's/<[^>]*>//g' || echo "")
        
        if [ "$BASE_API_VERSION" != "$PR_API_VERSION" ] && [ -n "$BASE_API_VERSION" ] && [ -n "$PR_API_VERSION" ]; then
          echo "⚠️ Plugin API version changed from $BASE_API_VERSION to $PR_API_VERSION"
          echo "BREAKING_CHANGE_DETECTED=true" >> $GITHUB_ENV
        fi
        
        # Check if plugin class name changed
        BASE_PLUGIN_CLASS=$(grep -o '<pluginClass>.*</pluginClass>' base/pom.xml | sed 's/<[^>]*>//g' || echo "")
        PR_PLUGIN_CLASS=$(grep -o '<pluginClass>.*</pluginClass>' pr/pom.xml | sed 's/<[^>]*>//g' || echo "")
        
        if [ "$BASE_PLUGIN_CLASS" != "$PR_PLUGIN_CLASS" ] && [ -n "$BASE_PLUGIN_CLASS" ] && [ -n "$PR_PLUGIN_CLASS" ]; then
          echo "⚠️ Plugin class changed from $BASE_PLUGIN_CLASS to $PR_PLUGIN_CLASS"
          echo "BREAKING_CHANGE_DETECTED=true" >> $GITHUB_ENV
        fi
        
        # Check for changes in public API files
        CHANGED_FILES=$(cd pr && git diff --name-only origin/${{ github.event.pull_request.base.ref }})
        PUBLIC_API_FILES="src/main/java/com/stepstone/sonar/plugin/coldfusion/ColdFusionPlugin.java"
        
        for file in $PUBLIC_API_FILES; do
          if echo "$CHANGED_FILES" | grep -q "$file"; then
            echo "⚠️ Public API file modified: $file"
            echo "API_CHANGE_DETECTED=true" >> $GITHUB_ENV
          fi
        done

    - name: Comment on breaking changes
      if: env.BREAKING_CHANGE_DETECTED == 'true' || env.API_CHANGE_DETECTED == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const comment = `
          ## ⚠️ Potential Breaking Changes Detected
          
          This PR contains changes that may break compatibility:
          
          ${process.env.BREAKING_CHANGE_DETECTED === 'true' ? '- Plugin API version or configuration changed' : ''}
          ${process.env.API_CHANGE_DETECTED === 'true' ? '- Public API files were modified' : ''}
          
          ### Review Required
          - [ ] Ensure changes are backward compatible
          - [ ] Update version number if breaking changes are intentional
          - [ ] Update documentation and migration guide
          - [ ] Test with existing SonarQube installations
          
          If these are intentional breaking changes, please update the PR description to explain the impact and migration path.
          `;
          
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  # Size and complexity check
  pr-size-check:
    name: PR Size Check
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check PR size
      uses: actions/github-script@v7
      with:
        script: |
          const pr = context.payload.pull_request;
          const files = await github.rest.pulls.listFiles({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: pr.number
          });
          
          const totalChanges = files.data.reduce((sum, file) => sum + file.changes, 0);
          const fileCount = files.data.length;
          
          let sizeLabel = '';
          let warningMessage = '';
          
          if (totalChanges < 50 && fileCount < 5) {
            sizeLabel = 'size/XS';
          } else if (totalChanges < 200 && fileCount < 10) {
            sizeLabel = 'size/S';
          } else if (totalChanges < 500 && fileCount < 20) {
            sizeLabel = 'size/M';
          } else if (totalChanges < 1000 && fileCount < 50) {
            sizeLabel = 'size/L';
            warningMessage = 'This is a large PR. Consider breaking it into smaller PRs for easier review.';
          } else {
            sizeLabel = 'size/XL';
            warningMessage = 'This is a very large PR. Please consider breaking it into smaller, focused PRs.';
          }
          
          // Add size label
          await github.rest.issues.addLabels({
            issue_number: pr.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: [sizeLabel]
          });
          
          // Comment if PR is large
          if (warningMessage) {
            await github.rest.issues.createComment({
              issue_number: pr.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 📏 Large PR Detected\n\n${warningMessage}\n\n**Stats:**\n- Files changed: ${fileCount}\n- Total changes: ${totalChanges}`
            });
          }

  # Auto-assign reviewers
  assign-reviewers:
    name: Auto-assign Reviewers
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: Auto-assign reviewers
      uses: actions/github-script@v7
      with:
        script: |
          const pr = context.payload.pull_request;
          
          // Skip if PR already has reviewers
          if (pr.requested_reviewers && pr.requested_reviewers.length > 0) {
            console.log('PR already has reviewers assigned');
            return;
          }
          
          // Define code owners/reviewers based on changed files
          const files = await github.rest.pulls.listFiles({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: pr.number
          });
          
          const changedFiles = files.data.map(file => file.filename);
          let reviewers = [];
          
          // Add appropriate reviewers based on changed files
          const hasJavaChanges = changedFiles.some(file => file.endsWith('.java'));
          const hasPomChanges = changedFiles.some(file => file.includes('pom.xml'));
          const hasDocChanges = changedFiles.some(file => file.endsWith('.md'));
          const hasCIChanges = changedFiles.some(file => file.includes('.github/workflows'));
          
          // Note: Replace these with actual GitHub usernames of your team
          if (hasJavaChanges) {
            // Add Java/plugin development reviewers
            console.log('Java changes detected - would assign Java reviewers');
          }
          
          if (hasPomChanges) {
            // Add Maven/dependency management reviewers  
            console.log('POM changes detected - would assign Maven reviewers');
          }
          
          if (hasCIChanges) {
            // Add CI/CD reviewers
            console.log('CI changes detected - would assign CI reviewers');
          }
          
          // For now, just log what would be done
          console.log('Auto-reviewer assignment completed');

  # All checks summary
  pr-checks-summary:
    name: PR Checks Summary
    runs-on: ubuntu-latest
    needs: [pr-validation, quick-validation, code-quality-check, breaking-changes-check, pr-size-check]
    if: always() && github.event.pull_request.draft == false
    
    steps:
    - name: Generate summary
      uses: actions/github-script@v7
      with:
        script: |
          const results = {
            'PR Validation': '${{ needs.pr-validation.result }}',
            'Quick Build & Test': '${{ needs.quick-validation.result }}', 
            'Code Quality': '${{ needs.code-quality-check.result }}',
            'Breaking Changes Check': '${{ needs.breaking-changes-check.result }}',
            'Size Check': '${{ needs.pr-size-check.result }}'
          };
          
          const passed = Object.values(results).filter(r => r === 'success').length;
          const total = Object.keys(results).length;
          const allPassed = passed === total;
          
          const summary = `
          ## 🔍 PR Validation Summary
          
          **Status: ${allPassed ? '✅ All checks passed' : '❌ Some checks failed'}**
          
          **Results (${passed}/${total} passed):**
          ${Object.entries(results).map(([name, result]) => {
            const icon = result === 'success' ? '✅' : result === 'failure' ? '❌' : '⏭️';
            return `- ${icon} ${name}: ${result}`;
          }).join('\n')}
          
          ${allPassed ? 
            '🎉 This PR is ready for review!' : 
            '⚠️ Please address the failing checks before requesting review.'
          }
          `;
          
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });
